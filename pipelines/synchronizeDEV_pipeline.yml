##############################################################################################################
#                                                                                                            #
# synchronizeDEV_pipeline.yml : Imports to DEV Stage                                                         #
#                                                                                                            #
# ####### Inputs ########                                                                                    #
# assetIDList: (Optional) Comma sepereated list of Ids of the asset to be Imported                           #
# assetTypeList: (Optional) Comma sepereated list os asset Types of the asset. Currently supported options:  #
#                 workflow, flowservice, referenceData, rest_api & project_parameter.                        #
# repoName: (Mandatory) Name of the corresponding repository.                                                #
# synchProject: (Mandatory) True if you want to synchronize complete project. If false, then you have to     #
#                provide assetIDList and assetTypeList                                                       #
##############################################################################################################


trigger: none
variables:
- group: webMethodsIO_group
- group: github_group
- group: azure_group
- name: repoPath
  value: $(gitOwner)/$(repoName)


pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: projectRepo
    type: github
    endpoint: Github_devops_mvp
    name: $(repoPath)
    ref: dev

steps:
- checkout: projectRepo
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: $(repoName)
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- script: |
    echo "##vso[task.setvariable variable=assetIDList;]'NA'"
    echo "##vso[task.setvariable variable=assetTypeList;]'NA'"
  condition: eq(variables['synchProject'], 'true') 
  displayName: 'Adjust variables'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/env/dev.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/env/dev.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/env/dev.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/env/dev.yml`"
    echo "##vso[task.setvariable variable=provider]`yq -e ".repo.security_provider" configs/repo.yml`"
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    # echo $(repoName)
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-$(repoName)"
    # echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
- script: |
    
    echo $(source_environment_hostname)
    echo $(source_environment_port)
    echo $(admin_user)
    echo $(source_type)
    echo $(assetIDList)
    echo $(assetTypeList)
    
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    echo $(repoName)
    echo $(assetIDList)
    LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
    
    pwd
    HOME_DIR=$(System.DefaultWorkingDirectory)/../
    cd $(System.DefaultWorkingDirectory)/../
    ls -ltr
    cd $(repoName)
    ls -ltr
    cat ./project-config.yml
    chmod +x ../self/pipelines/scripts/*.sh    
    
    #### Check and create Project
    echo "Fetching project id"
    existingProject_id=$(yq e '.project.project-id' "./project-config.yml")
    echo "Captured Project ID: [$existingProject_id]"

    echo "Check and create Project ..."
    project_id=$(../self/pipelines/scripts/createProject.sh \
              "${LOCAL_DEV_URL}" \
              "$(admin_user)" \
              "$(admin_password)" \
              "$(repoName)" \
              "$existingProject_id" \
              "debug" 2> >(tee >&2)) 
    
    echo $(source_environment_hostname)
    echo $(source_environment_port)
    echo $(admin_user)
    echo $(source_type)
    echo $(assetIDList)
    echo $(assetTypeList)
    echo ${HOME_DIR}
    echo $(synchProject)
    echo $(source_type)

    echo "Importing asset ..."
    ../self/pipelines/scripts/importAsset.sh "${LOCAL_DEV_URL}" "$(admin_user)" "$(admin_password)" "$(repoName)" "$(assetIDList)" "$(assetTypeList)" "${HOME_DIR}" "$(synchProject)" "$(source_type)" "$(includeAllReferenceData)" "$(provider)" "$(AZURE_VAULT_NAME)" "$(AZURE_RESOURCE_GROUP)" "$(AZURE_LOCATION)" "$(AZURE_TENANT_ID)" "$(AZURE_CLIENT_ID)" "$(AZURE_CLIENT_SECRET)" "$(AZURE_ACCESS_OBJECT_ID)" debug
  displayName: 'Import Asset'

- script: |
    cd ../$(repoName)
    FILE="./resources/test/environments/$(source_type).json"
    fileExists=false
    if test -f "$FILE"; then
      echo "$FILE exists."
      fileExists=true
    fi
    echo "##vso[task.setvariable variable=FileExists]$fileExists"
  displayName: 'Evaluate if Test Assets Exists'

- task: TriggerBuild@4
  inputs:
    buildDefinition: 'Test'
    useSameBranch: true
    storeInEnvironmentVariable: true
    authenticationMethod: 'OAuth Token'
    password: $(System.AccessToken)
    buildParameters: 
      'repoName:$(repoName), branch:$(source_type), environment:$(source_type)'
  displayName: Trigger Test Pipeline
  continueOnError: false
  condition: eq(variables['FileExists'], True)
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/../$(repoName)'
    artifactName: '$(repoName)_export'
  displayName: 'Publishing the export'
- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)../$(repoName)'
    Contents: './*' 
  displayName: 'Remove the Export after successful Commit'