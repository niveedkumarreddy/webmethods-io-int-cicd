# Export workflow pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
variables:
- group: webMethodsIO_group
- group: azure_group
- group: github_group
- name: repoPath
  value: $(gitOwner)/$(repoName)


pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: projectRepo
    type: github
    endpoint: Github_devops_mvp
    name: $(repoPath)
    ref: $(featureBranchName)
steps:
- checkout: projectRepo
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: $(repoName)
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- script: |
    echo "##vso[task.setvariable variable=assetIDList;]NA"
    echo "##vso[task.setvariable variable=assetTypeList;]NA"
    echo "##vso[task.setvariable variable=assetNameList;]NA"
  condition: eq(variables['synchProject'], 'true') 
  displayName: 'Adjust variables'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/env/play.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/env/play.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/env/play.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/env/play.yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    echo "##vso[task.setvariable variable=provider]`yq -e ".repo.security_provider" configs/repo.yml`"
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    #echo ${PROJECTNAME}
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-${PROJECTNAME}"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'

# setup python environment
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    addToPath: true

- script: |
    
    python3.10 -m pip3 install --upgrade pip
    pip3 install pynacl
    chmod +x ../self/pipelines/scripts/github/encryptGithubSecret.py

  displayName: 'Setup Python3 Environment'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  condition: succeeded()
      
- script: |
    #echo $(source_environment_hostname)
    #echo $(source_environment_port)
    #echo $(admin_user)
    #echo $(source_type)
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    #echo $(repoName)

  
    LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
    #echo ${LOCAL_DEV_URL}
    HOME_DIR=$(System.DefaultWorkingDirectory)/../
    cd $(System.DefaultWorkingDirectory)/../
    cd $(repoName)
    chmod +x -R ../self/pipelines/scripts/*.sh  
      

    config_dir=${HOME_DIR}self/configs/env
   

    ###### Fetching Environments
    echo "Fetching Environment Types  ..."
    envTypes=$(../self/pipelines/scripts/readEnvs.sh ${config_dir} $(source_type))
    echo "****Envs****: "$envTypes


    ###### Exporting
    echo "Exporting asset ..."
    ../self/pipelines/scripts/exportAsset.sh "${LOCAL_DEV_URL}" "$(admin_user)" "$(admin_password)" "$(repoName)" "$(assetIDList)" "$(assetTypeList)" "${HOME_DIR}" "$(synchProject)" "$(source_type)" "$(includeAllReferenceData)" "${envTypes}" "$(repo_user)" "$(PAT)" "$(provider)" "$(AZURE_VAULT_NAME)" "$(AZURE_RESOURCE_GROUP)" "$(AZURE_LOCATION)" "$(AZURE_TENANT_ID)" "$(AZURE_CLIENT_ID)" "$(AZURE_CLIENT_SECRET)" "$(AZURE_ACCESS_OBJECT_ID)" debug
  displayName: 'Export Asset'
  #failOnStderr: true


- script: |
    cd ../$(repoName)

    echo "Committing asset ..."
    chmod +x ../self/pipelines/scripts/github/*.sh    
    ../self/pipelines/scripts/github/commitFeatureBranch.sh $(devUser) $(Build.BuildNumber) $(featureBranchName) ${HOME_DIR} debug

  displayName: 'Commit the code to feature branch'

- script: |
    cd ../$(repoName)
    FILE="./resources/test/environments/$(source_type).json"
    fileExists=false
    if test -f "$FILE"; then
      echo "$FILE exists."
      fileExists=true
    fi
    echo "##vso[task.setvariable variable=FileExists]$fileExists"
  displayName: 'Evaluate if Test Assets Exists'


- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/../$(repoName)'
    artifactName: '$(repoName)_export'
  displayName: 'Publishing the export'

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)../$(repoName)'
    Contents: './*' 
  displayName: 'Remove the Export after successfull Commit'
- task: TriggerBuild@4
  inputs:
    buildDefinition: 'Test'
    useSameBranch: true
    storeInEnvironmentVariable: true
    authenticationMethod: 'OAuth Token'
    password: $(System.AccessToken)
    buildParameters: 
      'repoName:$(repoName), branch:$(featureBranchName), environment:$(source_type)'
  displayName: Trigger Test Pipeline
  continueOnError: false
  condition: eq(variables['FileExists'], True)
